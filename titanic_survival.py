# -*- coding: utf-8 -*-
"""Titanic_Survival .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-KiWFMjm4ilouL4JGr2l4UpptlqPKNi9
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/Titanic-Dataset.csv")

df.head()

df.describe()

df.info()

df.isnull().sum()

# Prepocessing

df.drop(["PassengerId","Name","Cabin"],axis=1,inplace=True)

df["Age"] = df["Age"].fillna(df["Age"].mean())

df

df.isnull().sum()

df["Embarked"] = df["Embarked"].fillna(df["Embarked"].mode()[0])

df.isnull().sum()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,r2_score,classification_report

df.info()

df

df["Sex"]=df["Sex"].map({"male":0,"female":1})

df["Embarked"]=df["Embarked"].map({"S":0,"C":1,"Q":2})

X=df[["Sex","Age","Fare","Embarked","SibSp","Parch"]]
y=df["Survived"]

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

df["Embarked"].isnull().sum()

logistic_model=LogisticRegression()
logistic_model.fit(X_train,y_train)

y_pred1=logistic_model.predict(X_test)

Tree_model=DecisionTreeClassifier()
Tree_model.fit(X_train,y_train)

y_pred2=Tree_model.predict(X_test)

print("Logistic Regression Accuracy:",accuracy_score(y_test,y_pred1))
print("Decision Tree Accuracy:",accuracy_score(y_test,y_pred2))
print("Logistic Regression Confusion Matrix:\n",confusion_matrix(y_test,y_pred1))
print("Decision Tree Confusion Matrix:\n",confusion_matrix(y_test,y_pred2))
print("Logistic Regression R2 Score:",r2_score(y_test,y_pred1))
print("Decision Tree R2 Score:",r2_score(y_test,y_pred2))
print("Logistic Regression Classification Report:\n",classification_report(y_test,y_pred1))
print("Decision Tree Classification Report:\n",classification_report(y_test,y_pred2))

import os

# üìÅ Create a visuals folder if it doesn't exist
os.makedirs("visuals", exist_ok=True)

# 1Ô∏è‚É£ Did women survive more than men?
sex_survival = df.groupby("Sex")["Survived"].mean()
print("Survival rate by Sex:\n", sex_survival)

plt.figure(figsize=(5,4))
sns.barplot(x="Sex", y="Survived", data=df, ci=None, palette="pastel")
plt.title("Survival Rate by Sex")
plt.savefig("visuals/survival_by_sex.png")
plt.close()


# 2Ô∏è‚É£ Did 1st class passengers survive more?
pclass_survival = df.groupby("Pclass")["Survived"].mean()
print("Survival rate by Pclass:\n", pclass_survival)

plt.figure(figsize=(5,4))
sns.barplot(x="Pclass", y="Survived", data=df, ci=None, palette="muted")
plt.title("Survival Rate by Passenger Class")
plt.savefig("visuals/survival_by_pclass.png")
plt.close()


# 3Ô∏è‚É£ Which age group had higher survival?
# Create age groups
bins = [0, 15, 50, 100]
labels = ["Child", "Adult", "Senior"]
df["AgeGroup"] = pd.cut(df["Age"], bins=bins, labels=labels, right=False)

age_survival = df.groupby("AgeGroup")["Survived"].mean()
print("Survival rate by Age Group:\n", age_survival)

plt.figure(figsize=(5,4))
sns.barplot(x="AgeGroup", y="Survived", data=df, ci=None, palette="Set2")
plt.title("Survival Rate by Age Group")
plt.savefig("visuals/survival_by_agegroup.png")
plt.close()


# 4Ô∏è‚É£ Confusion Matrix Visualization
plt.figure(figsize=(5,4))
ConfusionMatrixDisplay.from_estimator(logistic_model, X_test, y_test)
plt.title("Confusion Matrix")
plt.savefig("visuals/confusion_matrix.png")
plt.close()

print("‚úÖ All visualizations saved in 'visuals/' folder!")

import joblib
import os

# Create 'model' folder if not exists
os.makedirs("model", exist_ok=True)

# Save the trained model
joblib.dump(logistic_model, "model/titanic_model.pkl")
print("‚úÖ Model saved successfully as 'model/titanic_model.pkl'")

